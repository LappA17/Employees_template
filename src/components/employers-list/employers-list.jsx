import EmployersListItem from '../employers-list-item/employers-list-item';

import './employers-list.css';

/* Сейчас мы создаем сотрудников в ручную, в реальности инфа приходит от сервера 
    
   Вытаскиваем из пропсов data
   Что бы правильно передать data, нужно взять массив наших данных - перебрать каждый элемент массива и из него сформировать
каждый новый компонент EmployersListItem. И НАМ БУДЕТ ВСЕ РАВНО СКОЛЬКО ИМЕН ПРИЙДЕТ ОТ СЕРВЕРА, МЫ СГЕНЕРИРУЕМ ЕГО 
АВТОМАТИЧЕСКИ

    Нам нужно не просто перебрать массив, а что бы он вернул нам НОВЫЙ МАССИВ, ЧТО БЫ ВЕРНУЛСЯ НОВЫЙ МАССИВ ЭЛЕМЕНТОВ,
ТОЕСТЬ ДАННЫЕ ПРЕВРАТЯТЬСЯ В ЭЛЕМЕНТЫ. Нам подойдет метод map

    Нам в компонент приходит data  EmployersList = ({data})
    data - это массив с объектами, который мы будем использовать что бы построить новые компоненты
    Эти элементы мы перебираем с помощью метода map, где каждый объект внутри массива - у нас как item
    Соотвественно наша коллбек функция будет возвращать нам компонент в котором назначаются пропсы <EmployersListItem name={item.name} salary={item.salary}/>
    И так как работой map у нас является новый массив, то в elements у нас сейчас лежит массив с копонентами, те один
EmployerList, 4ый, 5ый и так далее, сколько получаться - столько и будет
    Теперь мы наш массив подставляем вот сюда return (<ul className="app-list list-group"> где все наши компоненты
развернуться и сформулируют нашу ВЕРСТКУ

    Дальше мы можем использовать спред опператор, что бы вместо того что бы в ручную передавать name и селери 
name={item.name} salary={item.salary}. Вот эта запись {...item} будет индитична name={item.name} salary={item.salary}
потому что мы просто берем объект и разворачиваем его на отдельные элементы
 */
const EmployersList = ({data}) => {

    const elements = data.map(item => {
        return(
            <EmployersListItem {...item}/>
        )
    })

    return (
        <ul className="app-list list-group">
            {elements}
        </ul>
    )
}
    export default EmployersList;